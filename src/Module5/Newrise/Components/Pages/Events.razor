@page "/events"
@inject EventDataService DataService
@inject ProtectedSessionStorage SessionStore
@inject IDialogService DialogService

<MudGrid Class="ma-8">
	<MudItem xs="12">
		<MudText Typo="Typo.h5">Events</MudText>
		@if (Items == null)
		{
			<MudAlert Severity="Severity.Info">
				Data is loading. Please wait...
			</MudAlert>
		}
		else
		{
			<MudTable
				Items=@Items Bordered="true" Striped="true" RowsPerPage="10"
				Filter=@(item=>string.Concat(item.Id,item.Type,item.Title).Contains(SearchText,StringComparison.InvariantCultureIgnoreCase))>
				<ToolBarContent>
				<AuthorizeView Roles="admin">
					<MudButton Variant="Variant.Filled" Color="Color.Primary"
							   Href="/events/new">ADD EVENT</MudButton>
					</AuthorizeView>
				<MudSpacer />
				<MudTextField @bind-Value="SearchText"
					Placeholder="Search" Immediate
					Adornment="Adornment.Start"
					AdornmentIcon=@Icons.Material.Filled.Search
					IconSize="Size.Medium"></MudTextField>
				</ToolBarContent>
			<HeaderContent>
				<MudTh>
					<MudTableSortLabel
						SortBy="new Func<Event,object>(x => x.Id)">ID</MudTableSortLabel>
					</MudTh>
				<MudTh>Type</MudTh>
				<MudTh>
					<MudTableSortLabel SortBy="new Func<Event,object>(x => x.Title)">Title</MudTableSortLabel>
				</MudTh>
				<MudTh>From</MudTh>
				<MudTh>Hours</MudTh>
				<MudTh>Seats</MudTh>
				<MudTh>
						<MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<Event,object>(x => x.Fee)">Fee</MudTableSortLabel>
				</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="ID">@context.Id</MudTd>
				<MudTd DataLabel="Type">@context.Type</MudTd>
				<MudTd DataLabel="Title">
					<MudLink OnClick=@(()=>ShowDetails(@context))>
							@context.Title
					</MudLink></MudTd>
				<MudTd DataLabel="From">@context.From</MudTd>
				<MudTd DataLabel="Hours">@context.Hours</MudTd>
				<MudTd DataLabel="Seats">@context.Seats</MudTd>
				<MudTd DataLabel="Fee">@context.Fee</MudTd>
			</RowTemplate>
			<PagerContent>
				<MudTablePager />
			</PagerContent>
		</MudTable>
		}
	</MudItem>
</MudGrid>
@code {
	List<Event> Items { get; set; }

	string _searchText = string.Empty;

	string SearchText {
		get {
			return _searchText;
		}
		set {
			SessionStore.SetAsync("Events.SearchText", _searchText = value);
		}
	}

	void ShowDetails(Event item) {
		var options = new DialogOptions
		{
			CloseButton = true,
			CloseOnEscapeKey = true,
			BackdropClick = false,
			FullScreen = true
		};
		var parameters = new DialogParameters();
		parameters.Add("Event", item);
		parameters.Add("EventUpdated", new Action<EventUpdatedReason, Event>(OnEventUpdated));
		DialogService.Show<EventDetails>(null, parameters, options);
		//	DialogService.Show<EventDetails>(null, parameters);
	}

	async void OnEventUpdated(EventUpdatedReason reason, Event item) {
		Items = await DataService.GetEventsAsync();
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync() {
		//	await Task.Delay(4000);
		var result = await SessionStore.GetAsync<string>("Events.SearchText");
		if (result.Success) _searchText = result.Value;
		Items = await DataService.GetEventsAsync();
	}
}
