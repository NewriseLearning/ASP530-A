@using System.Security.Claims
@inject EventDataService EventDataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar


<MudDialog>
	<TitleContent>
		<MudText Typo="Typo.h5">Event Details</MudText>
		<MudDivider />
	</TitleContent>
	<DialogContent>
		<MudStack Row=@true>
			<MudSpacer />
			@if (Event.Online)
			{
				<MudChip T="string" Color=@Color.Info>ONLINE</MudChip>
			}
			@if (Event.RemainingSeats == 0) {
				<MudChip T="string" Color=@Color.Info>FULL</MudChip>
			}
			@if (IsParticipating) {
				<MudChip T="string" Color=@Color.Secondary>PARTICIPATING</MudChip>
			}
		</MudStack>
		<MudStack Row=@true>
		<MudTextField Label="ID" Value=@Event.Id ReadOnly />
		<MudTextField FullWidth Label="TITLE" Value=@Event.Title ReadOnly />
		</MudStack><br />
		<MudStack Row=@true>
		<MudTextField Label="TYPE" Value=@Event.Type ReadOnly />
		<MudTextField Label="FROM" Value=@Event.From ReadOnly />
		<MudTextField Label="HOURS" Value=@Event.Hours ReadOnly />
		</MudStack><br />
		@if (!string.IsNullOrEmpty(Event.Description)) {
			<MudTextField Label="DESCRIPTION"
						  Value=@Event.Description Lines="5" ReadOnly />
			<br />
		}
		<MudStack Row=@true>
			<MudTextField Label="SEATS" Value=@Event.Seats ReadOnly />
			<MudTextField Label="ALLOCATED SEATS" Value=@Event.AllocatedSeats ReadOnly />
			<MudTextField Label="REMAINING SEATS" Value=@Event.RemainingSeats ReadOnly />
		</MudStack><br />
		@if (Event.Fee != 0) {
			<MudTextField Label="FEE"
				Value=@Event.Fee ReadOnly />
			<br />
		}
		@if (IsProcessing) {
			<MudProgressCircular Class="mx-auto"
								 Color="Color.Primary" Indeterminate="true" />
		}
		else {
			<AuthorizeView>
				@if (IsParticipating) {
					<MudButton Color=@Color.Primary
							   Variant=@Variant.Filled OnClick=@LeaveEventAsync>
						LEAVE EVENT
					</MudButton>
				}
				else if (Event.RemainingSeats > 0) {
					<MudButton Color=@Color.Primary
							   Variant=@Variant.Filled OnClick=@ParticipateEventAsync>
						PARTICIPATE EVENT
					</MudButton>
				}
			</AuthorizeView>
			<AuthorizeView Roles="admin">
				<MudButton Class="ml-auto"
						   Color="Color.Error" Variant="Variant.Filled"
						   OnClick="DeleteEventAsync">DELETE</MudButton>
			</AuthorizeView>
		}
	</DialogContent>
</MudDialog>

@code {
	[CascadingParameter]
	MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public Event Event { get; set; }

	[Parameter]
	public Action<EventUpdatedReason, Event> EventUpdated { get; set; }
//	public Action<Event> EventRemoved { get; set; }
//	public Action<Event> EventParticipantAdded {get; set;}
//	public Action<Event> EventParticipantRemoved {get; set; }

	bool IsProcessing { get; set; } = false;

	ClaimsPrincipal User { get; set; }
	bool IsParticipating { get; set; }

	protected override async Task OnParametersSetAsync() {
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		User = state.User;  // cache the user (ClaimsPrincipal)
		if (User.Identity.IsAuthenticated) {
			IsParticipating = await EventDataService.HasParticipantAsync(
				Event.Id, User.Identity.Name);
		}
	}

	async Task ParticipateEventAsync() {
		try {
			IsProcessing = true;
			await EventDataService.AddParticipantAsync(Event.Id, User.Identity.Name);
			Snackbar.Add($"Participation in event '{Event.Id}' confirmed.", Severity.Success);
			IsParticipating = true; EventUpdated?.Invoke(EventUpdatedReason.ParticipantAdded, Event);
		}
		catch (Exception ex) { Snackbar.Add(ex.Message, Severity.Error); }
		finally { MudDialog.Close(); }
	}

	async Task LeaveEventAsync() {
		try {
			IsProcessing = true;
			await EventDataService.RemoveParticipantAsync(Event.Id, User.Identity.Name);
			Snackbar.Add($"Your '{Event.Id}' event participation is cancelled.", Severity.Success);
			IsParticipating = false; EventUpdated?.Invoke(EventUpdatedReason.ParticipantRemoved, Event);
		}
		catch (Exception ex) { Snackbar.Add(ex.Message, Severity.Error); }
		finally { MudDialog.Close(); }
	}

	async Task DeleteEventAsync() {
		try {
			IsProcessing = true;
		//	await Task.Delay(3000);
			await EventDataService.RemoveEventAsync(Event.Id);
			Snackbar.Add($"Event '{Event.Id}' deleted.", Severity.Success);
			EventUpdated?.Invoke(EventUpdatedReason.Deleted, Event);
			MudDialog.Close();
		}
		catch (Exception) {
			Snackbar.Add($"Cannot delete event '{Event.Id}'.", Severity.Error);
		}
		finally {
			IsProcessing = false;
		//	MudDialog.Close();
		}
	}


}
