@page "/events/new"
@inject EventDataService DataService

<EditForm Model=@Item
	OnValidSubmit=@HandleSubmitAsync
	OnInvalidSubmit=@(()=>ValidationFailed=true)>
	<DataAnnotationsValidator />
	<MudGrid>
		<MudItem xs="12">
			<MudCard Class="pa-8 ma-2">
				<MudCardContent>
					<MudText Typo="Typo.h5">New Event</MudText><br />
					<MudStack Row="true">
						<MudTextField @ref=Id Label="ID *" @bind-Value="Item.Id"
							MaxLength="6" For=@(()=>Item.Id) AutoFocus="true" />
						<MudSelect T="EventType" Label="EVENT TYPE *"
							AnchorOrigin="Origin.BottomCenter"
							@bind-Value="Item.Type"
							For=@(()=>Item.Type)>
							<MudSelectItem T="EventType" Value="EventType.Presentation" />
							<MudSelectItem T="EventType" Value="EventType.Training" />
							<MudSelectItem T="EventType" Value="EventType.Workshop" />
							<MudSelectItem T="EventType" Value="EventType.Forum" />
						</MudSelect>
						<MudCheckBox class="pt-2" Label="Available Online" @bind-Value="Item.Online" />
					</MudStack>
					<MudTextField Label="TITLE *" @bind-Value="Item.Title" MaxLength="50"
						For=@(()=>Item.Title) /><br />
					<MudTextField Label="DESCRIPTION" @bind-Value="Item.Description" MaxLength="1000"
						For=@(()=>Item.Description) Lines="5" /><br />
					<MudStack Row="true">
						<MudDatePicker Label="START DATE" @bind-Date="Item.FromDate" />
						<MudTimePicker Label="START TIME" @bind-Time="Item.FromTime" />
					</MudStack>
					<br />
					<MudStack Row="true">
						<MudNumericField Label="HOURS" @bind-Value="Item.Hours"
							Min="0.5" Max="8.0" Step="1.0" For=@(()=>Item.Hours) />
						<MudNumericField Label="SEATS" @bind-Value="Item.Seats"
							 Min="1" Max="200" Step="10" For=@(()=>Item.Seats) />
						<MudNumericField Label="FEE" @bind-Value="Item.Fee"
							 Min="0" Max="5000" Step="100" For=@(()=>Item.Fee) />
					</MudStack>
					<br />
					@if (ValidationFailed) {
						<MudAlert Severity="Severity.Error">
							<ValidationSummary />
						</MudAlert>
					}
					@if (Success != string.Empty) {
						<MudAlert Severity="Severity.Success">@Success</MudAlert>
					}
					@if (Failure != string.Empty) {
						<MudAlert Severity="Severity.Error">@Failure</MudAlert>
					}
				</MudCardContent>
				<MudCardActions>
					<MudButton Color="Color.Primary" Variant="Variant.Filled"
						ButtonType="ButtonType.Submit">SAVE</MudButton>
					<MudButton Class="ml-2" Color="Color.Primary" Variant="Variant.Filled"
						Href="/events">VIEW EVENTS</MudButton>
				</MudCardActions>
			</MudCard>
		</MudItem>
	</MudGrid>
</EditForm>
@code {
	MudTextField<string> Id { get; set; }

	bool ValidationFailed { get; set; }

	string Success { get; set; } = string.Empty;
	string Failure { get; set; } = string.Empty;
	Event Item { get; set; } = new Event { From = DateTime.Now };

	void HandleSubmit(EditContext context) {
		try {
			ValidationFailed = false;
			Success = string.Empty;
			Failure = string.Empty;
			DataService.AddEvent(Item);
			Success = $"Event {Item.Id} added successfully.";
			Item = new Event { From = DateTime.Now };
		}
		catch (Exception ex) {
			Failure = $"{ex.Message} Cannot add event.";
		}
		finally {
		//	StateHasChanged();
			Id.FocusAsync();
		}
	}

	async void HandleSubmitAsync(EditContext context) {
		try {
			ValidationFailed = false;
			Success = string.Empty;
			Failure = string.Empty;
			await DataService.AddEventAsync(Item);
			Success = $"Event {Item.Id} added successfully.";
			Item = new Event { From = DateTime.Now };
		}
		catch (Exception ex) {
			Failure = $"{ex.Message} Cannot add event.";
		}
		finally {
			await Id.FocusAsync();
			StateHasChanged();
		}
	}


}
